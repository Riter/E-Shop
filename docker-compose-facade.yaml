version: '3.9'

services:
  # Kafka services
  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  kafka-setup:
    image: bitnami/kafka:3.7
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      # Create the topic with 2 partitions
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic item-events --partitions 2 --replication-factor 1
      
      # List topics to verify
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      "

  facade-consumer-app:
    build: facade-consumer/
    dns:
      - 8.8.8.8
      - 8.8.4.4
    container_name: go-kafka-redis-app
    environment:
      KAFKA_BROKERS: "kafka:9092"
      KAFKA_TOPIC: "item-events"
      KAFKA_GROUP_ID: "my-group"
      REDIS_ADDR: "redis:6379"
      REDIS_PASS: ""
      REDIS_DB: "0"
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy

    ports:
      - "8080:8080"



# ###################################################

  facade-app:
    dns:
      - 8.8.8.8
      - 1.1.1.1
    build: facade/
    container_name: go-app
    ports:
      - "8086:8089"
      - "8092:10666"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      POSTGRES_HOST: db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: appdb

      # Redis config
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD:
      REDIS_DB: 0
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:10666/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  db:
    image: postgres:15
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: appdb
    ports:
      - "10010:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./elastic_search_service/migrations:/docker-entrypoint-initdb.d  
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  redis:
    image: redis:7
    container_name: redis-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s

volumes:
  postgres_data:
  redis_data:
