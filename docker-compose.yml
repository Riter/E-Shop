services:
  db:
    image: postgres:latest
    container_name: psql_products
    env_file:
      - elastic_search_service/environment/.env
    ports:
      - "28371:5434"
    command: ["postgres", "-c", "port=5434"]
    volumes:
      - ./elastic_search_service/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -p 5434"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Kafka services
  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9091:9092"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  kafka-setup:
    image: bitnami/kafka:3.7
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      # Create the topic with 2 partitions
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic item-events --partitions 2 --replication-factor 1
      
      # List topics to verify
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      "

  # MinIO service
  minio:
    image: minio/minio:latest
    container_name: minio
    env_file:
      - elastic_search_service/environment/.env
    # volumes:
      # - minio_data:/data
    command: server /data --console-address ":9001"
    ports:
      - "29045:9000"  
      - "29046:9001"  
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s

  elasticsearch:
    image: elasticsearch:8.5.0
    container_name: elasticsearch
    env_file:
      - elastic_search_service/environment/elastic.env  # Подключаем .env
    environment:
      - discovery.type=single-node
      - xpack.security.http.ssl.enabled=false
      - TZ=UTC
    volumes:
      # - elastic_data:/usr/share/elasticsearch/data
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    ports:
      - "14723:9200"
      - "15897:9300"
    restart: on-failure:5
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"'"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Application services
  search_service:
    build: ./elastic_search_service
    container_name: search_service
    restart: always
    depends_on:
      - db
      - elasticsearch
    env_file:
      - elastic_search_service/environment/api.env
    ports:
      - "51842:51842"
    command: [ "sh", "-c", "echo 'Жду 10 сек после PostgreSQL...' && sleep 10 && echo 'Жду 30 сек после Elasticsearch...' && sleep 30 && echo 'Запускаю сервис!' && ./search_service" ]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:51842/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - monitoring

  manage-item-crud:
    build: ./manage_item_crud
    depends_on:
      kafka-setup:
        condition: service_completed_successfully
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    ports:
      - "8000:8000"
    command: >
      sh -c "
        echo 'Waiting for Kafka to be ready...' &&
        sleep 5 &&
        python main.py"
      
  manage-item-etl:
    build: ./manage_item_etl
    depends_on:
      kafka-setup:
        condition: service_completed_successfully
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    command: >
      sh -c "
        echo 'Waiting for Kafka to be ready...' &&
        sleep 10 &&
        python main.py"

  # Test service
  test_curl:
    image: alpine:latest
    depends_on:
      - search_service
    command: 
      - sh
      - -c
      - |
        apk add --no-cache curl
        echo "Жду 55 секунд..."
        sleep 55
        watch -n 7 'curl -s "http://search_service:51842/search?q=наушники"'

  facade-consumer-app:
    build: facade-consumer/
    dns:
      - 8.8.8.8
      - 8.8.4.4
    container_name: go-kafka-redis-app
    environment:
      KAFKA_BROKERS: "kafka:9092"
      KAFKA_TOPIC: "item-events"
      KAFKA_GROUP_ID: "my-group"
      REDIS_ADDR: "redis:6379"
      REDIS_PASS: ""
      REDIS_DB: "0"
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy

    ports:
      - "8096:8096"
    networks:
      - monitoring

  facade-app:
    dns:
      - 8.8.8.8
      - 1.1.1.1
    build: facade/
    container_name: go-app
    ports:
      - "8087:8089"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - elastic_search_service/environment/.env
    networks:
      - monitoring


  redis:
    image: redis:7
    container_name: redis-cache
    ports:
      - "6379:6379"
    # volumes:
      # - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s


  postgres-sso:
    image: postgres:15
    container_name: postgres-sso
    env_file:
      sso/environment/postgres.env
    ports:
      - "5438:5432"
    # volumes:
    #   - pg_data_sso:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "sso_user"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  migrate:
    build: sso
    container_name: migrate
    restart: on-failure:5
    depends_on:
      postgres-sso:
        condition: service_healthy
    command: ["./migrate", "--migrations-path=migrations",  "--migrations-table=migrations_tests"]
    env_file:
      sso/environment/postgres.env

  sso:
    build: sso
    container_name: sso
    depends_on:
      postgres-sso:
        condition: service_healthy
    ports:
      - "44044:44044"
    env_file:
      sso/environment/postgres.env
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring
    restart: unless-stopped
  
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    # volumes:
    #   - grafana-storage:/var/lib/grafana
    restart: unless-stopped

  proxy-service:
    build: ./proxy
    container_name: proxy_service
    env_file:
      - ./proxy/.env
    ports:
      - "8002:8002"
    depends_on:
      - sso
      - search_service
      - facade-app
  jaeger:
    image: jaegertracing/all-in-one:1.54
    ports:
      - "16686:16686"  # UI
      - "4317:4317"    # OTLP gRPC
    environment:
      - COLLECTOR_OTLP_ENABLED=true

networks:
  monitoring:
    driver: bridge

# volumes:
#   pg_data:
#   minio_data:
#   elastic_data:
#   redis_data:

